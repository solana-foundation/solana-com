---
description: 
globs: *.tsx,*.ts,*.jsx,*.js
alwaysApply: false
---
---
description: Global Next.js + TypeScript standards (Tailwind, Shadcn, Radix, RSC, Zustand, TanStack Query, Zod, Jest/RTL).
alwaysApply: true
---

## Authoritative guidelines

### Code style
- Write **TypeScript** with functional, declarative patterns â€“ never classes.
- Prefer **early returns** and **guard clauses**; avoid nested conditionals.
- Name booleans with auxiliaries (`isLoading`, `hasError`).

### File & folder conventions
- Each component in its own folder:  
  `components/auth-wizard/*`
- Export **top-level component**, optional `Subcomponents.tsx`, `helpers.ts`, `types.ts`.
- Use **kebab-case** for directories.

### Rendering strategy
- Default to **React Server Components**; mark client code with `'use client'` only when interactive.
- Favour **SSR / SSG** data hooks (`fetch` in RSC, `getStaticProps`, etc.).
- Use **dynamic imports** (`next/dynamic`) for heavy, client-only bundles.

### State & data
- **Local:** `useState` / `useReducer` for component-scoped concerns.
- **Global:** Zustand slices in `src/stores/`.
- **Async:** TanStack React Query (`suspense: true`) for server/data fetching.
- **Validation:** Zod at all IO boundaries (APIs, forms, env).

### UI / Styling
- Style with **Tailwind CSS**; compose primitives with **Shadcn UI** & **Radix UI**.
- Mobile-first, fluid spacing, responsive breakpoints (`sm/ md/ lg/ xl/ 2xl`).
- Optimise images: `<Image src="*.webp" fill sizes />`, `loading="lazy"`.

### Error handling
- Throw **custom errors** (`class AppError extends Error { cause?: unknown }`).
- Wrap async operations in `try/catch`; surface via an error boundary.

### Performance & security
- Enable **Content-Security-Policy**, **X-Frame-Options**, **Strict-Transport-Security** headers.
- Strip unreachable code with `@next/bundle-analyzer`.
- Use **sentry-nextjs** for monitoring.

### Testing & docs
- Unit test with **Jest + React Testing Library**; cover hooks & edge cases.
- Keep comments explanatory, not redundant.

