// Generated by repokit publish

import { RepokitTemplate } from "./types";

export const templates: RepokitTemplate[] = [
  {
    source: {
      id: "solana",
      name: "Solana",
      source: "gh:solana-foundation/templates",
      provider: "gh",
      owner: "solana-foundation",
      repo: "templates",
    },
    description: "Next.js, Tailwind, gill (based on @solana/kit), Wallet UI",
    id: "gh:solana-foundation/templates/gill/gill-next-tailwind",
    keywords: [
      "gill",
      "nextjs",
      "react",
      "solana-kit",
      "tailwind",
      "typescript",
      "wallet-ui",
    ],
    name: "gill-next-tailwind",
    path: "gill/gill-next-tailwind",
    readme:
      '<h1>gill-next-tailwind</h1>\n<p>This is a Next.js app containing:</p>\n<ul>\n<li>Tailwind and Shadcn UI for styling</li>\n<li><a href="https://gill.site/">Gill</a> Solana SDK</li>\n<li>Shadcn <a href="https://registry.wallet-ui.dev">Wallet UI</a> components</li>\n</ul>\n<h2>Getting Started</h2>\n<h3>Installation</h3>\n<h4>Create an app using this template</h4>\n<pre><code class="language-shell">npx create-solana-dapp@latest -t gh:solana-foundation/templates/gill/gill-next-tailwind\n</code></pre>\n<h4>Install Dependencies</h4>\n<pre><code class="language-shell">npm install\n</code></pre>\n<h4>Start the app</h4>\n<pre><code class="language-shell">npm run dev\n</code></pre>\n',
    repoUrl:
      "https://github.com/solana-foundation/templates/tree/main/gill/gill-next-tailwind",
  },
  {
    source: {
      id: "solana",
      name: "Solana",
      source: "gh:solana-foundation/templates",
      provider: "gh",
      owner: "solana-foundation",
      repo: "templates",
    },
    description:
      "Next.js, Tailwind, basic Anchor example, gill (based on @solana/kit), Wallet UI",
    id: "gh:solana-foundation/templates/gill/gill-next-tailwind-basic",
    keywords: [
      "anchor-basic",
      "gill",
      "nextjs",
      "react",
      "solana-kit",
      "tailwind",
      "typescript",
      "wallet-ui",
    ],
    name: "gill-next-tailwind-basic",
    path: "gill/gill-next-tailwind-basic",
    readme:
      '<h1>gill-next-tailwind-basic</h1>\n<p>This is a Next.js app containing:</p>\n<ul>\n<li>Tailwind and Shadcn UI for styling</li>\n<li><a href="https://gill.site/">Gill</a> Solana SDK</li>\n<li>Shadcn <a href="https://registry.wallet-ui.dev">Wallet UI</a> components</li>\n<li>A basic Greeter Solana program written in Anchor</li>\n<li><a href="https://github.com/codama-idl/codama">codama</a> to generate a JS sdk for the program</li>\n<li>UI components for interacting with the program</li>\n</ul>\n<h2>Getting Started</h2>\n<h3>Installation</h3>\n<h4>Download the template</h4>\n<pre><code class="language-shell">npx create-solana-dapp@latest -t gh:solana-foundation/templates/gill/gill-next-tailwind-basic\n</code></pre>\n<h4>Install Dependencies</h4>\n<pre><code class="language-shell">npm install\n</code></pre>\n<h2>Apps</h2>\n<h3>anchor</h3>\n<p>This is a Solana program written in Rust using the Anchor framework.</p>\n<h4>Commands</h4>\n<p>You can use any normal anchor commands. Either move to the <code>anchor</code> directory and run the <code>anchor</code> command or prefix the\ncommand with <code>npm run</code>, eg: <code>npm run anchor</code>.</p>\n<h4>Sync the program id:</h4>\n<p>Running this command will create a new keypair in the <code>anchor/target/deploy</code> directory and save the address to the\nAnchor config file and update the <code>declare_id!</code> macro in the <code>./src/lib.rs</code> file of the program. This will also update\nthe constant in <code>anchor/src/basic-exports.ts</code> file.</p>\n<pre><code class="language-shell">npm run setup\n</code></pre>\n<h4>Build the program:</h4>\n<pre><code class="language-shell">npm run anchor-build\n</code></pre>\n<h4>Start the test validator with the program deployed:</h4>\n<pre><code class="language-shell">npm run anchor-localnet\n</code></pre>\n<h4>Run the tests</h4>\n<pre><code class="language-shell">npm run anchor-test\n</code></pre>\n<h4>Deploy to Devnet</h4>\n<pre><code class="language-shell">npm run anchor deploy --provider.cluster devnet\n</code></pre>\n<h3>web</h3>\n<p>This is a React app that uses the Anchor generated client to interact with the Solana program.</p>\n<h4>Commands</h4>\n<p>Start the app</p>\n<pre><code class="language-shell">npm run dev\n</code></pre>\n<p>Build the app</p>\n<pre><code class="language-shell">npm run build\n</code></pre>\n',
    repoUrl:
      "https://github.com/solana-foundation/templates/tree/main/gill/gill-next-tailwind-basic",
  },
  {
    source: {
      id: "solana",
      name: "Solana",
      source: "gh:solana-foundation/templates",
      provider: "gh",
      owner: "solana-foundation",
      repo: "templates",
    },
    description:
      "Next.js, Tailwind, Anchor Counter example, gill (based on @solana/kit), Wallet UI",
    id: "gh:solana-foundation/templates/gill/gill-next-tailwind-counter",
    keywords: [
      "anchor-counter",
      "gill",
      "nextjs",
      "react",
      "solana-kit",
      "tailwind",
      "typescript",
      "wallet-ui",
    ],
    name: "gill-next-tailwind-counter",
    path: "gill/gill-next-tailwind-counter",
    readme:
      '<h1>gill-next-tailwind-counter</h1>\n<p>This is a Next.js app containing:</p>\n<ul>\n<li>Tailwind and Shadcn UI for styling</li>\n<li><a href="https://gill.site/">Gill</a> Solana SDK</li>\n<li>Shadcn <a href="https://registry.wallet-ui.dev">Wallet UI</a> components</li>\n<li>A basic Counter Solana program written in Anchor</li>\n<li><a href="https://github.com/codama-idl/codama">codama</a> to generate a JS sdk for the program</li>\n<li>UI components for interacting with the program</li>\n</ul>\n<h2>Getting Started</h2>\n<h3>Installation</h3>\n<h4>Download the template</h4>\n<pre><code class="language-shell">npx create-solana-dapp@latest -t gh:solana-foundation/templates/gill/gill-next-tailwind-counter\n</code></pre>\n<h4>Install Dependencies</h4>\n<pre><code class="language-shell">npm install\n</code></pre>\n<h2>Apps</h2>\n<h3>anchor</h3>\n<p>This is a Solana program written in Rust using the Anchor framework.</p>\n<h4>Commands</h4>\n<p>You can use any normal anchor commands. Either move to the <code>anchor</code> directory and run the <code>anchor</code> command or prefix the\ncommand with <code>npm</code>, eg: <code>npm run anchor</code>.</p>\n<h4>Sync the program id:</h4>\n<p>Running this command will create a new keypair in the <code>anchor/target/deploy</code> directory and save the address to the\nAnchor config file and update the <code>declare_id!</code> macro in the <code>./src/lib.rs</code> file of the program. This will also update\nthe constant in the <code>anchor/src/counter-exports.ts</code> file.</p>\n<pre><code class="language-shell">npm run setup\n</code></pre>\n<h4>Build the program:</h4>\n<pre><code class="language-shell">npm run anchor-build\n</code></pre>\n<h4>Start the test validator with the program deployed:</h4>\n<pre><code class="language-shell">npm run anchor-localnet\n</code></pre>\n<h4>Run the tests</h4>\n<pre><code class="language-shell">npm run anchor-test\n</code></pre>\n<h4>Deploy to Devnet</h4>\n<pre><code class="language-shell">npm run anchor deploy --provider.cluster devnet\n</code></pre>\n<h3>web</h3>\n<p>This is a React app that uses the Anchor generated client to interact with the Solana program.</p>\n<h4>Commands</h4>\n<p>Start the app</p>\n<pre><code class="language-shell">npm run dev\n</code></pre>\n<p>Build the app</p>\n<pre><code class="language-shell">npm run build\n</code></pre>\n',
    repoUrl:
      "https://github.com/solana-foundation/templates/tree/main/gill/gill-next-tailwind-counter",
  },
  {
    source: {
      id: "solana",
      name: "Solana",
      source: "gh:solana-foundation/templates",
      provider: "gh",
      owner: "solana-foundation",
      repo: "templates",
    },
    description:
      "Minimal Next.js, Tailwind, gill (based on @solana/kit), Wallet UI",
    id: "gh:solana-foundation/templates/gill/gill-next-tailwind-minimal",
    keywords: [
      "gill",
      "minimal",
      "nextjs",
      "react",
      "solana-kit",
      "tailwind",
      "typescript",
      "wallet-ui",
    ],
    name: "gill-next-tailwind-minimal",
    path: "gill/gill-next-tailwind-minimal",
    readme:
      '<h1>gill-next-tailwind</h1>\n<p>This is a Next.js app containing:</p>\n<ul>\n<li>Tailwind and Shadcn UI for styling</li>\n<li><a href="https://gill.site/">Gill</a> Solana SDK</li>\n<li>Shadcn <a href="https://registry.wallet-ui.dev">Wallet UI</a> components</li>\n</ul>\n<h2>Getting Started</h2>\n<h3>Installation</h3>\n<h4>Download the template</h4>\n<pre><code class="language-shell">npx create-solana-dapp@latest -t gh:solana-foundation/templates/gill/gill-next-tailwind\n</code></pre>\n<h4>Install Dependencies</h4>\n<pre><code class="language-shell">npm install\n</code></pre>\n<h4>Start the app</h4>\n<pre><code class="language-shell">npm run dev\n</code></pre>\n',
    repoUrl:
      "https://github.com/solana-foundation/templates/tree/main/gill/gill-next-tailwind-minimal",
  },
  {
    source: {
      id: "solana",
      name: "Solana",
      source: "gh:solana-foundation/templates",
      provider: "gh",
      owner: "solana-foundation",
      repo: "templates",
    },
    description: "Node.js Express API with gill (based on @solana/kit)",
    id: "gh:solana-foundation/templates/gill/gill-node-express",
    keywords: ["express", "gill", "node", "solana-kit"],
    name: "gill-node-express",
    path: "gill/gill-node-express",
    readme:
      '<h1>gill-node-express</h1>\n<p>Simple node Express API that comes with <a href="https://github.com/solana-foundation/gill">gill</a>\nbased on <a href="https://github.com/anza-xyz/kit">@solana/kit</a>.</p>\n<h2>Getting started</h2>\n<p>Clone the repo:</p>\n<pre><code class="language-shell">git clone https://github.com/solana-foundation/templates\ncd templates/gill/gill-node-express\n</code></pre>\n<p>Install dependencies:</p>\n<pre><code class="language-shell">npm install\n</code></pre>\n<p>Start the api:</p>\n<pre><code class="language-shell">npm run dev\n</code></pre>\n<p>Build the api:</p>\n<pre><code class="language-shell">npm run build\n</code></pre>\n<p>The artifacts will be in the <code>dist</code> directory. You can now run the api using <code>npm run start</code> or <code>node dist/index.js</code>.</p>\n<h2>Docker</h2>\n<p>Build the Docker image:</p>\n<pre><code class="language-shell">npm run docker:build\n</code></pre>\n<p>Run the Docker image:</p>\n<pre><code class="language-shell">npm run docker:run\n</code></pre>\n<h2>Environment variables</h2>\n<p>The following environment variables can be used to configure the API:</p>\n<ul>\n<li><code>SOLANA_RPC_ENDPOINT</code>: The Solana RPC endpoint to use. Defaults to <code>devnet</code>.</li>\n<li><code>SOLANA_SIGNER_PATH</code>: The path to the keypair signer file. Defaults to <code>./keypair-signer.json</code>.</li>\n<li><code>CORS_ORIGINS</code>: A comma-separated list of allowed origins for CORS. Defaults to <code>*</code>.</li>\n</ul>\n<h2>Examples (curl)</h2>\n<p>Below are some examples of how to use the API using <code>curl</code>. You can use <a href="https://jqlang.org/">jq</a> to format the output.</p>\n<h3>Balance</h3>\n<p>This command will return the balance of the provided address.</p>\n<pre><code class="language-shell">curl http://localhost:3000/balance/FeeSoLT7WdoZVXsBPSZc7WKEuhVDVA1TKrNQoHacvxYm\n</code></pre>\n<h3>Balance (signer)</h3>\n<p>This command will return the balance of the signer\'s address.</p>\n<pre><code class="language-shell">curl http://localhost:3000/balance-signer\n</code></pre>\n<h3>Cluster</h3>\n<p>This command will return the cluster based on the genesis hash of the connected cluster.</p>\n<pre><code class="language-shell">curl http://localhost:3000/cluster\n</code></pre>\n<h3>Latest blockhash</h3>\n<p>This command will return the latest blockhash of the connected cluster. It uses a cached blockhash if available.</p>\n<pre><code class="language-shell">curl http://localhost:3000/latest-blockhash\n</code></pre>\n',
    repoUrl:
      "https://github.com/solana-foundation/templates/tree/main/gill/gill-node-express",
  },
  {
    source: {
      id: "solana",
      name: "Solana",
      source: "gh:solana-foundation/templates",
      provider: "gh",
      owner: "solana-foundation",
      repo: "templates",
    },
    description: "Node.js script with gill (based on @solana/kit)",
    id: "gh:solana-foundation/templates/gill/gill-node-script",
    keywords: ["gill", "node", "solana-kit"],
    name: "gill-node-script",
    path: "gill/gill-node-script",
    readme:
      '<h1>gill-node-script</h1>\n<p>Simple node script that comes with <a href="https://github.com/solana-foundation/gill">gill</a>\nbased on <a href="https://github.com/anza-xyz/kit">@solana/kit</a>.</p>\n',
    repoUrl:
      "https://github.com/solana-foundation/templates/tree/main/gill/gill-node-script",
  },
  {
    source: {
      id: "solana",
      name: "Solana",
      source: "gh:solana-foundation/templates",
      provider: "gh",
      owner: "solana-foundation",
      repo: "templates",
    },
    description: "React+Vite, Tailwind, gill (based on @solana/kit), Wallet UI",
    id: "gh:solana-foundation/templates/gill/gill-react-vite-tailwind",
    keywords: [
      "gill",
      "react",
      "solana-kit",
      "tailwind",
      "typescript",
      "vite",
      "wallet-ui",
    ],
    name: "gill-react-vite-tailwind",
    path: "gill/gill-react-vite-tailwind",
    readme:
      '<h1>gill-react-vite-tailwind</h1>\n<p>This is a React/Vite app containing:</p>\n<ul>\n<li>Tailwind and Shadcn UI for styling</li>\n<li><a href="https://gill.site/">Gill</a> Solana SDK</li>\n<li>Shadcn <a href="https://registry.wallet-ui.dev">Wallet UI</a> components</li>\n</ul>\n<h2>Getting Started</h2>\n<h3>Installation</h3>\n<h4>Download the template</h4>\n<pre><code class="language-shell">npx create-solana-dapp@latest -t gh:solana-foundation/templates/gill/gill-react-vite-tailwind\n</code></pre>\n<h4>Install Dependencies</h4>\n<pre><code class="language-shell">npm install\n</code></pre>\n<h3>Start the app</h3>\n<pre><code class="language-shell">npm run dev\n</code></pre>\n',
    repoUrl:
      "https://github.com/solana-foundation/templates/tree/main/gill/gill-react-vite-tailwind",
  },
  {
    source: {
      id: "solana",
      name: "Solana",
      source: "gh:solana-foundation/templates",
      provider: "gh",
      owner: "solana-foundation",
      repo: "templates",
    },
    description:
      "React+Vite, Tailwind, gill (based on @solana/kit), basic Anchor example, Wallet UI",
    id: "gh:solana-foundation/templates/gill/gill-react-vite-tailwind-basic",
    keywords: [
      "anchor-basic",
      "gill",
      "react",
      "solana-kit",
      "tailwind",
      "typescript",
      "vite",
      "wallet-ui",
    ],
    name: "gill-react-vite-tailwind-basic",
    path: "gill/gill-react-vite-tailwind-basic",
    readme:
      '<h1>gill-react-vite-tailwind-basic</h1>\n<p>This is a React/Vite app containing:</p>\n<ul>\n<li>Tailwind and Shadcn UI for styling</li>\n<li><a href="https://gill.site/">Gill</a> Solana SDK</li>\n<li>Shadcn <a href="https://registry.wallet-ui.dev">Wallet UI</a> components</li>\n<li>A basic Greeter Solana program written in Anchor</li>\n<li><a href="https://github.com/codama-idl/codama">codama</a> to generate a JS sdk for the program</li>\n<li>UI components for interacting with the program</li>\n</ul>\n<h2>Getting Started</h2>\n<h3>Installation</h3>\n<h4>Download the template</h4>\n<pre><code class="language-shell">npx create-solana-dapp@latest -t gh:solana-foundation/templates/gill/gill-react-vite-tailwind-basic\n</code></pre>\n<h4>Install Dependencies</h4>\n<pre><code class="language-shell">npm install\n</code></pre>\n<h2>Apps</h2>\n<h3>anchor</h3>\n<p>This is a Solana program written in Rust using the Anchor framework.</p>\n<h4>Commands</h4>\n<p>You can use any normal anchor commands. Either move to the <code>anchor</code> directory and run the <code>anchor</code> command or prefix the\ncommand with <code>npm</code>, eg: <code>npm run anchor</code>.</p>\n<h4>Sync the program id:</h4>\n<p>Running this command will create a new keypair in the <code>anchor/target/deploy</code> directory and save the address to the\nAnchor config file and update the <code>declare_id!</code> macro in the <code>./src/lib.rs</code> file of the program. This will also update\nthe constant in the <code>anchor/src/basic-exports.ts</code> file.</p>\n<pre><code class="language-shell">npm run setup\n</code></pre>\n<pre><code class="language-shell">npm run anchor keys sync\n</code></pre>\n<h4>Build the program:</h4>\n<pre><code class="language-shell">npm run anchor-build\n</code></pre>\n<h4>Start the test validator with the program deployed:</h4>\n<pre><code class="language-shell">npm run anchor-localnet\n</code></pre>\n<h4>Run the tests</h4>\n<pre><code class="language-shell">npm run anchor-test\n</code></pre>\n<h4>Deploy to Devnet</h4>\n<pre><code class="language-shell">npm run anchor deploy --provider.cluster devnet\n</code></pre>\n<h3>web</h3>\n<p>This is a React app that uses the Anchor generated client to interact with the Solana program.</p>\n<h4>Commands</h4>\n<p>Start the app</p>\n<pre><code class="language-shell">npm run dev\n</code></pre>\n<p>Build the app</p>\n<pre><code class="language-shell">npm run build\n</code></pre>\n',
    repoUrl:
      "https://github.com/solana-foundation/templates/tree/main/gill/gill-react-vite-tailwind-basic",
  },
  {
    source: {
      id: "solana",
      name: "Solana",
      source: "gh:solana-foundation/templates",
      provider: "gh",
      owner: "solana-foundation",
      repo: "templates",
    },
    description:
      "React+Vite, Tailwind, gill (based on @solana/kit), Anchor Counter example, Wallet UI",
    id: "gh:solana-foundation/templates/gill/gill-react-vite-tailwind-counter",
    keywords: [
      "anchor-counter",
      "gill",
      "react",
      "solana-kit",
      "tailwind",
      "typescript",
      "vite",
      "wallet-ui",
    ],
    name: "gill-react-vite-tailwind-counter",
    path: "gill/gill-react-vite-tailwind-counter",
    readme:
      '<h1>gill-react-vite-tailwind-counter</h1>\n<p>This is a React/Vite app containing:</p>\n<ul>\n<li>Tailwind and Shadcn UI for styling</li>\n<li><a href="https://gill.site/">Gill</a> Solana SDK</li>\n<li>Shadcn <a href="https://registry.wallet-ui.dev">Wallet UI</a> components</li>\n<li>A basic Counter Solana program written in Anchor</li>\n<li><a href="https://github.com/codama-idl/codama">codama</a> to generate a JS sdk for the program</li>\n<li>UI components for interacting with the Counter program using the Anchor generated client</li>\n</ul>\n<h2>Getting Started</h2>\n<h3>Installation</h3>\n<h4>Download the template</h4>\n<pre><code class="language-shell">npx create-solana-dapp@latest -t gh:solana-foundation/templates/gill/gill-react-vite-tailwind-counter\n</code></pre>\n<h4>Install Dependencies</h4>\n<pre><code class="language-shell">npm install\n</code></pre>\n<h2>Apps</h2>\n<h3>anchor</h3>\n<p>This is a Solana program written in Rust using the Anchor framework.</p>\n<h4>Commands</h4>\n<p>You can use any normal anchor commands. Either move to the <code>anchor</code> directory and run the <code>anchor</code> command or prefix the\ncommand with <code>npm</code>, eg: <code>npm run anchor</code>.</p>\n<h4>Sync the program id:</h4>\n<p>Running this command will create a new keypair in the <code>anchor/target/deploy</code> directory and save the address to the\nAnchor config file and update the <code>declare_id!</code> macro in the <code>./src/lib.rs</code> file of the program. This will also update\nthe constant in the <code>anchor/src/counter-exports.ts</code> file.</p>\n<pre><code class="language-shell">npm run setup\n</code></pre>\n<pre><code class="language-shell">npm run anchor keys sync\n</code></pre>\n<h4>Build the program:</h4>\n<pre><code class="language-shell">npm run anchor-build\n</code></pre>\n<h4>Start the test validator with the program deployed:</h4>\n<pre><code class="language-shell">npm run anchor-localnet\n</code></pre>\n<h4>Run the tests</h4>\n<pre><code class="language-shell">npm run anchor-test\n</code></pre>\n<h4>Deploy to Devnet</h4>\n<pre><code class="language-shell">npm run anchor deploy --provider.cluster devnet\n</code></pre>\n<h3>web</h3>\n<p>This is a React app that uses the Anchor generated client to interact with the Solana program.</p>\n<h4>Commands</h4>\n<p>Start the app</p>\n<pre><code class="language-shell">npm run dev\n</code></pre>\n<p>Build the app</p>\n<pre><code class="language-shell">npm run build\n</code></pre>\n',
    repoUrl:
      "https://github.com/solana-foundation/templates/tree/main/gill/gill-react-vite-tailwind-counter",
  },
  {
    source: {
      id: "solana",
      name: "Solana",
      source: "gh:solana-foundation/templates",
      provider: "gh",
      owner: "solana-foundation",
      repo: "templates",
    },
    description:
      "Minimal React+Vite, Tailwind, gill (based on @solana/kit), Wallet UI",
    id: "gh:solana-foundation/templates/gill/gill-react-vite-tailwind-minimal",
    keywords: [
      "gill",
      "minimal",
      "react",
      "solana-kit",
      "tailwind",
      "typescript",
      "vite",
      "wallet-ui",
    ],
    name: "gill-react-vite-tailwind-minimal",
    path: "gill/gill-react-vite-tailwind-minimal",
    readme:
      '<h1>gill-react-vite-tailwind</h1>\n<p>This is a React/Vite app containing:</p>\n<ul>\n<li>Tailwind and Shadcn UI for styling</li>\n<li><a href="https://gill.site/">Gill</a> Solana SDK</li>\n<li>Shadcn <a href="https://registry.wallet-ui.dev">Wallet UI</a> components</li>\n</ul>\n<h2>Getting Started</h2>\n<h3>Installation</h3>\n<h4>Download the template</h4>\n<pre><code class="language-shell">npx create-solana-dapp@latest -t gh:solana-foundation/templates/gill/gill-react-vite-tailwind\n</code></pre>\n<h4>Install Dependencies</h4>\n<pre><code class="language-shell">npm install\n</code></pre>\n<h3>Start the app</h3>\n<pre><code class="language-shell">npm run dev\n</code></pre>\n',
    repoUrl:
      "https://github.com/solana-foundation/templates/tree/main/gill/gill-react-vite-tailwind-minimal",
  },
  {
    source: {
      id: "solana",
      name: "Solana",
      source: "gh:solana-foundation/templates",
      provider: "gh",
      owner: "solana-foundation",
      repo: "templates",
    },
    description:
      "A template for building a Solana mobile app with Expo and React Native.",
    id: "gh:solana-foundation/templates/mobile/web3js-expo",
    keywords: [
      "expo",
      "mobile-wallet-adapter",
      "react-native",
      "solana-web3js",
    ],
    name: "web3js-expo",
    path: "mobile/web3js-expo",
    readme:
      '<h1>Welcome to your Expo app 👋</h1>\n<p>This is an <a href="https://expo.dev">Expo</a> project created with <a href="https://www.npmjs.com/package/create-expo-app"><code>create-expo-app</code></a>.</p>\n<h2>Get started</h2>\n<ol>\n<li>\n<p>Install dependencies</p>\n<pre><code class="language-bash">npm install\n</code></pre>\n</li>\n<li>\n<p>Start the app</p>\n<pre><code class="language-bash">npx expo start\n</code></pre>\n</li>\n</ol>\n<p>In the output, you\'ll find options to open the app in a</p>\n<ul>\n<li><a href="https://docs.expo.dev/develop/development-builds/introduction/">development build</a></li>\n<li><a href="https://docs.expo.dev/workflow/android-studio-emulator/">Android emulator</a></li>\n<li><a href="https://docs.expo.dev/workflow/ios-simulator/">iOS simulator</a></li>\n<li><a href="https://expo.dev/go">Expo Go</a>, a limited sandbox for trying out app development with Expo</li>\n</ul>\n<p>You can start developing by editing the files inside the <strong>app</strong> directory. This project uses <a href="https://docs.expo.dev/router/introduction">file-based routing</a>.</p>\n<h2>Get a fresh project</h2>\n<p>When you\'re ready, run:</p>\n<pre><code class="language-bash">npm run reset-project\n</code></pre>\n<p>This command will move the starter code to the <strong>app-example</strong> directory and create a blank <strong>app</strong> directory where you can start developing.</p>\n<h2>Learn more</h2>\n<p>To learn more about developing your project with Expo, look at the following resources:</p>\n<ul>\n<li><a href="https://docs.expo.dev/">Expo documentation</a>: Learn fundamentals, or go into advanced topics with our <a href="https://docs.expo.dev/guides">guides</a>.</li>\n<li><a href="https://docs.expo.dev/tutorial/introduction/">Learn Expo tutorial</a>: Follow a step-by-step tutorial where you\'ll create a project that runs on Android, iOS, and the web.</li>\n</ul>\n<h2>Join the community</h2>\n<p>Join our community of developers creating universal apps.</p>\n<ul>\n<li><a href="https://github.com/expo/expo">Expo on GitHub</a>: View our open source platform and contribute.</li>\n<li><a href="https://chat.expo.dev">Discord community</a>: Chat with Expo users and ask questions.</li>\n</ul>\n',
    repoUrl:
      "https://github.com/solana-foundation/templates/tree/main/mobile/web3js-expo",
  },
  {
    source: {
      id: "solana",
      name: "Solana",
      source: "gh:solana-foundation/templates",
      provider: "gh",
      owner: "solana-foundation",
      repo: "templates",
    },
    description:
      "A template for building a Solana mobile app with Expo and React Native Paper.",
    id: "gh:solana-foundation/templates/mobile/web3js-expo-paper",
    keywords: [
      "expo",
      "mobile-wallet-adapter",
      "react-native",
      "react-native-paper",
      "solana-web3js",
    ],
    name: "web3js-expo-paper",
    path: "mobile/web3js-expo-paper",
    readme:
      '<h1>web3js-expo-paper</h1>\n<p>This is an <a href="https://expo.dev">Expo</a> project created with <a href="https://www.npmjs.com/package/create-expo-app">\n<code>create-expo-app</code></a>.</p>\n<h2>Get started</h2>\n<ol>\n<li>\n<p>Install dependencies</p>\n<pre><code class="language-bash">npm install\n</code></pre>\n</li>\n<li>\n<p>Start the app</p>\n<pre><code class="language-bash">npx expo start\n</code></pre>\n</li>\n</ol>\n<p>In the output, you\'ll find options to open the app in a</p>\n<ul>\n<li><a href="https://docs.expo.dev/develop/development-builds/introduction/">development build</a></li>\n<li><a href="https://docs.expo.dev/workflow/android-studio-emulator/">Android emulator</a></li>\n<li><a href="https://docs.expo.dev/workflow/ios-simulator/">iOS simulator</a></li>\n<li><a href="https://expo.dev/go">Expo Go</a>, a limited sandbox for trying out app development with Expo</li>\n</ul>\n<p>You can start developing by editing the files inside the <strong>app</strong> directory. This project\nuses <a href="https://docs.expo.dev/router/introduction">file-based routing</a>.</p>\n<h2>Get a fresh project</h2>\n<p>When you\'re ready, run:</p>\n<pre><code class="language-bash">npm run reset-project\n</code></pre>\n<p>This command will move the starter code to the <strong>app-example</strong> directory and create a blank <strong>app</strong> directory where you\ncan start developing.</p>\n<h2>Learn more</h2>\n<p>To learn more about developing your project with Expo, look at the following resources:</p>\n<ul>\n<li><a href="https://docs.expo.dev/">Expo documentation</a>: Learn fundamentals, or go into advanced topics with\nour <a href="https://docs.expo.dev/guides">guides</a>.</li>\n<li><a href="https://docs.expo.dev/tutorial/introduction/">Learn Expo tutorial</a>: Follow a step-by-step tutorial where you\'ll\ncreate a project that runs on Android, iOS, and the web.</li>\n</ul>\n<h2>Join the community</h2>\n<p>Join our community of developers creating universal apps.</p>\n<ul>\n<li><a href="https://github.com/expo/expo">Expo on GitHub</a>: View our open source platform and contribute.</li>\n<li><a href="https://chat.expo.dev">Discord community</a>: Chat with Expo users and ask questions.</li>\n</ul>\n',
    repoUrl:
      "https://github.com/solana-foundation/templates/tree/main/mobile/web3js-expo-paper",
  },
  {
    source: {
      id: "solana",
      name: "Solana",
      source: "gh:solana-foundation/templates",
      provider: "gh",
      owner: "solana-foundation",
      repo: "templates",
    },
    description: "Next.js, Tailwind, @solana/web3.js, Wallet Adapter",
    id: "gh:solana-foundation/templates/web3js/web3js-next-tailwind",
    keywords: [
      "nextjs",
      "react",
      "solana-web3js",
      "tailwind",
      "typescript",
      "wallet-adapter",
    ],
    name: "web3js-next-tailwind",
    path: "web3js/web3js-next-tailwind",
    readme:
      '<h1>web3js-next-tailwind</h1>\n<p>This is a Next.js app containing:</p>\n<ul>\n<li>Tailwind CSS setup for styling</li>\n<li>Useful wallet UI elements setup using <a href="https://www.npmjs.com/package/@solana/web3.js">@solana/web3.js</a></li>\n</ul>\n<h2>Getting Started</h2>\n<h3>Installation</h3>\n<h4>Download the template</h4>\n<pre><code class="language-shell">pnpm create solana-dapp@latest -t gh:solana-foundation/templates/web3js/web3js-next-tailwind\n</code></pre>\n<h4>Install Dependencies</h4>\n<pre><code class="language-shell">pnpm install\n</code></pre>\n<h4>Start the web app</h4>\n<pre><code class="language-shell">pnpm dev\n</code></pre>\n',
    repoUrl:
      "https://github.com/solana-foundation/templates/tree/main/web3js/web3js-next-tailwind",
  },
  {
    source: {
      id: "solana",
      name: "Solana",
      source: "gh:solana-foundation/templates",
      provider: "gh",
      owner: "solana-foundation",
      repo: "templates",
    },
    description:
      "Next.js, Tailwind, @solana/web3.js, Wallet Adapter, basic Anchor program",
    id: "gh:solana-foundation/templates/web3js/web3js-next-tailwind-basic",
    keywords: [
      "anchor-basic",
      "nextjs",
      "react",
      "solana-web3js",
      "tailwind",
      "typescript",
      "wallet-adapter",
    ],
    name: "web3js-next-tailwind-basic",
    path: "web3js/web3js-next-tailwind-basic",
    readme:
      '<h1>web3js-next-tailwind-basic</h1>\n<p>This is a Next.js app containing:</p>\n<ul>\n<li>Tailwind CSS setup for styling</li>\n<li>Useful wallet UI elements setup using <a href="https://www.npmjs.com/package/@solana/web3.js">@solana/web3.js</a></li>\n<li>A basic Greeter Solana program written in Anchor</li>\n<li>UI components for interacting with the Greeter program</li>\n</ul>\n<h2>Getting Started</h2>\n<h3>Installation</h3>\n<h4>Download the template</h4>\n<pre><code class="language-shell">pnpm create solana-dapp@latest -t gh:solana-foundation/templates/web3js/web3js-next-tailwind-basic\n</code></pre>\n<h4>Install Dependencies</h4>\n<pre><code class="language-shell">pnpm install\n</code></pre>\n<h2>Apps</h2>\n<h3>anchor</h3>\n<p>This is a Solana program written in Rust using the Anchor framework.</p>\n<h4>Commands</h4>\n<p>You can use any normal anchor commands. Either move to the <code>anchor</code> directory and run the <code>anchor</code> command or prefix the\ncommand with <code>pnpm</code>, eg: <code>pnpm anchor</code>.</p>\n<h4>Sync the program id:</h4>\n<p>Running this command will create a new keypair in the <code>anchor/target/deploy</code> directory and save the address to the\nAnchor config file and update the <code>declare_id!</code> macro in the <code>./src/lib.rs</code> file of the program.</p>\n<p>You will manually need to update the constant in <code>anchor/lib/counter-exports.ts</code> to match the new program id.</p>\n<pre><code class="language-shell">pnpm anchor keys sync\n</code></pre>\n<h4>Build the program:</h4>\n<pre><code class="language-shell">pnpm anchor-build\n</code></pre>\n<h4>Start the test validator with the program deployed:</h4>\n<pre><code class="language-shell">pnpm anchor-localnet\n</code></pre>\n<h4>Run the tests</h4>\n<pre><code class="language-shell">pnpm anchor-test\n</code></pre>\n<h4>Deploy to Devnet</h4>\n<pre><code class="language-shell">pnpm anchor deploy --provider.cluster devnet\n</code></pre>\n<h3>web</h3>\n<p>This is a React app that uses the Anchor generated client to interact with the Solana program.</p>\n<h4>Commands</h4>\n<p>Start the web app</p>\n<pre><code class="language-shell">pnpm dev\n</code></pre>\n<p>Build the web app</p>\n<pre><code class="language-shell">pnpm build\n</code></pre>\n',
    repoUrl:
      "https://github.com/solana-foundation/templates/tree/main/web3js/web3js-next-tailwind-basic",
  },
  {
    source: {
      id: "solana",
      name: "Solana",
      source: "gh:solana-foundation/templates",
      provider: "gh",
      owner: "solana-foundation",
      repo: "templates",
    },
    description:
      "Next.js, Tailwind, @solana/web3.js, Wallet Adapter, Anchor Counter program",
    id: "gh:solana-foundation/templates/web3js/web3js-next-tailwind-counter",
    keywords: [
      "anchor-counter",
      "nextjs",
      "react",
      "solana-web3js",
      "tailwind",
      "typescript",
      "wallet-adapter",
    ],
    name: "web3js-next-tailwind-counter",
    path: "web3js/web3js-next-tailwind-counter",
    readme:
      '<h1>web3js-next-tailwind-counter</h1>\n<p>This is a Next.js app containing:</p>\n<ul>\n<li>Tailwind CSS setup for styling</li>\n<li>Useful wallet UI elements setup using <a href="https://www.npmjs.com/package/@solana/web3.js">@solana/web3.js</a></li>\n<li>A basic Counter Solana program written in Anchor</li>\n<li>UI components for interacting with the Counter program</li>\n</ul>\n<h2>Getting Started</h2>\n<h3>Installation</h3>\n<h4>Download the template</h4>\n<pre><code class="language-shell">pnpm create solana-dapp@latest -t gh:solana-foundation/templates/web3js/web3js-next-tailwind-counter\n</code></pre>\n<h4>Install Dependencies</h4>\n<pre><code class="language-shell">pnpm install\n</code></pre>\n<h2>Apps</h2>\n<h3>anchor</h3>\n<p>This is a Solana program written in Rust using the Anchor framework.</p>\n<h4>Commands</h4>\n<p>You can use any normal anchor commands. Either move to the <code>anchor</code> directory and run the <code>anchor</code> command or prefix the\ncommand with <code>pnpm</code>, eg: <code>pnpm anchor</code>.</p>\n<h4>Sync the program id:</h4>\n<p>Running this command will create a new keypair in the <code>anchor/target/deploy</code> directory and save the address to the\nAnchor config file and update the <code>declare_id!</code> macro in the <code>./src/lib.rs</code> file of the program.</p>\n<p>You will manually need to update the constant in <code>anchor/lib/counter-exports.ts</code> to match the new program id.</p>\n<pre><code class="language-shell">pnpm anchor keys sync\n</code></pre>\n<h4>Build the program:</h4>\n<pre><code class="language-shell">pnpm anchor-build\n</code></pre>\n<h4>Start the test validator with the program deployed:</h4>\n<pre><code class="language-shell">pnpm anchor-localnet\n</code></pre>\n<h4>Run the tests</h4>\n<pre><code class="language-shell">pnpm anchor-test\n</code></pre>\n<h4>Deploy to Devnet</h4>\n<pre><code class="language-shell">pnpm anchor deploy --provider.cluster devnet\n</code></pre>\n<h3>web</h3>\n<p>This is a React app that uses the Anchor generated client to interact with the Solana program.</p>\n<h4>Commands</h4>\n<p>Start the web app</p>\n<pre><code class="language-shell">pnpm dev\n</code></pre>\n<p>Build the web app</p>\n<pre><code class="language-shell">pnpm build\n</code></pre>\n',
    repoUrl:
      "https://github.com/solana-foundation/templates/tree/main/web3js/web3js-next-tailwind-counter",
  },
  {
    source: {
      id: "solana",
      name: "Solana",
      source: "gh:solana-foundation/templates",
      provider: "gh",
      owner: "solana-foundation",
      repo: "templates",
    },
    description: "React + Vite, Tailwind, @solana/web3.js, Wallet Adapter",
    id: "gh:solana-foundation/templates/web3js/web3js-react-vite-tailwind",
    keywords: [
      "react",
      "solana-web3js",
      "tailwind",
      "typescript",
      "vite",
      "wallet-adapter",
    ],
    name: "web3js-react-vite-tailwind",
    path: "web3js/web3js-react-vite-tailwind",
    readme:
      '<h1>web3js-react-vite-tailwind</h1>\n<p>This is a Vite app containing:</p>\n<ul>\n<li>Tailwind CSS setup for styling</li>\n<li>Useful wallet UI elements setup using <a href="https://www.npmjs.com/package/@solana/web3.js">@solana/web3.js</a></li>\n</ul>\n<h2>Getting Started</h2>\n<h3>Installation</h3>\n<h4>Download the template</h4>\n<pre><code class="language-shell">pnpm create solana-dapp@latest -t gh:solana-foundation/templates/web3js/web3js-react-vite-tailwind\n</code></pre>\n<h4>Install Dependencies</h4>\n<pre><code class="language-shell">pnpm install\n</code></pre>\n<h3>Start the web app</h3>\n<pre><code class="language-shell">pnpm dev\n</code></pre>\n',
    repoUrl:
      "https://github.com/solana-foundation/templates/tree/main/web3js/web3js-react-vite-tailwind",
  },
  {
    source: {
      id: "solana",
      name: "Solana",
      source: "gh:solana-foundation/templates",
      provider: "gh",
      owner: "solana-foundation",
      repo: "templates",
    },
    description:
      "React + Vite, Tailwind, @solana/web3.js, Wallet Adapter, basic Anchor program",
    id: "gh:solana-foundation/templates/web3js/web3js-react-vite-tailwind-basic",
    keywords: [
      "anchor-basic",
      "react",
      "solana-web3js",
      "tailwind",
      "typescript",
      "vite",
      "wallet-adapter",
    ],
    name: "web3js-react-vite-tailwind-basic",
    path: "web3js/web3js-react-vite-tailwind-basic",
    readme:
      '<h1>web3js-react-vite-tailwind-basic</h1>\n<p>This is a Vite app containing:</p>\n<ul>\n<li>Tailwind CSS setup for styling</li>\n<li>Useful wallet UI elements setup using <a href="https://www.npmjs.com/package/@solana/web3.js">@solana/web3.js</a></li>\n<li>A basic Greeter Solana program written in Anchor</li>\n<li>UI components for interacting with the Greeter program using the Anchor generated client</li>\n</ul>\n<h2>Getting Started</h2>\n<h3>Installation</h3>\n<h4>Download the template</h4>\n<pre><code class="language-shell">pnpm create solana-dapp@latest -t gh:solana-foundation/templates/web3js/web3js-react-vite-tailwind-basic\n</code></pre>\n<h4>Install Dependencies</h4>\n<pre><code class="language-shell">pnpm install\n</code></pre>\n<h2>Apps</h2>\n<h3>anchor</h3>\n<p>This is a Solana program written in Rust using the Anchor framework.</p>\n<h4>Commands</h4>\n<p>You can use any normal anchor commands. Either move to the <code>anchor</code> directory and run the <code>anchor</code> command or prefix the\ncommand with <code>pnpm</code>, eg: <code>pnpm anchor</code>.</p>\n<h4>Sync the program id:</h4>\n<p>Running this command will create a new keypair in the <code>anchor/target/deploy</code> directory and save the address to the\nAnchor config file and update the <code>declare_id!</code> macro in the <code>./src/lib.rs</code> file of the program.</p>\n<p>You will manually need to update the constant in <code>anchor/lib/counter-exports.ts</code> to match the new program id.</p>\n<pre><code class="language-shell">pnpm anchor keys sync\n</code></pre>\n<h4>Build the program:</h4>\n<pre><code class="language-shell">pnpm anchor-build\n</code></pre>\n<h4>Start the test validator with the program deployed:</h4>\n<pre><code class="language-shell">pnpm anchor-localnet\n</code></pre>\n<h4>Run the tests</h4>\n<pre><code class="language-shell">pnpm anchor-test\n</code></pre>\n<h4>Deploy to Devnet</h4>\n<pre><code class="language-shell">pnpm anchor deploy --provider.cluster devnet\n</code></pre>\n<h3>web</h3>\n<p>This is a React app that uses the Anchor generated client to interact with the Solana program.</p>\n<h4>Commands</h4>\n<p>Start the web app</p>\n<pre><code class="language-shell">pnpm dev\n</code></pre>\n<p>Build the web app</p>\n<pre><code class="language-shell">pnpm build\n</code></pre>\n',
    repoUrl:
      "https://github.com/solana-foundation/templates/tree/main/web3js/web3js-react-vite-tailwind-basic",
  },
  {
    source: {
      id: "solana",
      name: "Solana",
      source: "gh:solana-foundation/templates",
      provider: "gh",
      owner: "solana-foundation",
      repo: "templates",
    },
    description:
      "React + Vite, Tailwind, @solana/web3.js, Wallet Adapter, Anchor Counter program",
    id: "gh:solana-foundation/templates/web3js/web3js-react-vite-tailwind-counter",
    keywords: [
      "anchor-counter",
      "web3js",
      "react",
      "solana-web3js",
      "tailwind",
      "typescript",
      "vite",
      "wallet-adapter",
    ],
    name: "web3js-react-vite-tailwind-counter",
    path: "web3js/web3js-react-vite-tailwind-counter",
    readme:
      '<h1>web3js-react-vite-tailwind-counter</h1>\n<p>This is a Vite app containing:</p>\n<ul>\n<li>Tailwind CSS setup for styling</li>\n<li>Useful wallet UI elements setup using <a href="https://www.npmjs.com/package/@solana/web3.js">@solana/web3.js</a></li>\n<li>A basic Greeter Solana program written in Anchor</li>\n<li>UI components for interacting with the Greeter program using the Anchor generated client</li>\n</ul>\n<h2>Getting Started</h2>\n<h3>Installation</h3>\n<h4>Download the template</h4>\n<pre><code class="language-shell">pnpm create solana-dapp@latest -t gh:solana-foundation/templates/web3js/web3js-react-vite-tailwind-counter\n</code></pre>\n<h4>Install Dependencies</h4>\n<pre><code class="language-shell">pnpm install\n</code></pre>\n<h2>Apps</h2>\n<h3>anchor</h3>\n<p>This is a Solana program written in Rust using the Anchor framework.</p>\n<h4>Commands</h4>\n<p>You can use any normal anchor commands. Either move to the <code>anchor</code> directory and run the <code>anchor</code> command or prefix the\ncommand with <code>pnpm</code>, eg: <code>pnpm anchor</code>.</p>\n<h4>Sync the program id:</h4>\n<p>Running this command will create a new keypair in the <code>anchor/target/deploy</code> directory and save the address to the\nAnchor config file and update the <code>declare_id!</code> macro in the <code>./src/lib.rs</code> file of the program.</p>\n<p>You will manually need to update the constant in <code>anchor/lib/counter-exports.ts</code> to match the new program id.</p>\n<pre><code class="language-shell">pnpm anchor keys sync\n</code></pre>\n<h4>Build the program:</h4>\n<pre><code class="language-shell">pnpm anchor-build\n</code></pre>\n<h4>Start the test validator with the program deployed:</h4>\n<pre><code class="language-shell">pnpm anchor-localnet\n</code></pre>\n<h4>Run the tests</h4>\n<pre><code class="language-shell">pnpm anchor-test\n</code></pre>\n<h4>Deploy to Devnet</h4>\n<pre><code class="language-shell">pnpm anchor deploy --provider.cluster devnet\n</code></pre>\n<h3>web</h3>\n<p>This is a React app that uses the Anchor generated client to interact with the Solana program.</p>\n<h4>Commands</h4>\n<p>Start the web app</p>\n<pre><code class="language-shell">pnpm dev\n</code></pre>\n<p>Build the web app</p>\n<pre><code class="language-shell">pnpm build\n</code></pre>\n',
    repoUrl:
      "https://github.com/solana-foundation/templates/tree/main/web3js/web3js-react-vite-tailwind-counter",
  },
  {
    source: {
      id: "solana",
      name: "Solana",
      source: "gh:solana-foundation/templates",
      provider: "gh",
      owner: "solana-foundation",
      repo: "templates",
    },
    description:
      "A modern, script-driven Solana airdrop template that distributes SOL to many recipients efficiently using a Merkle tree",
    id: "gh:solana-foundation/templates/community/gill-jito-airdrop",
    keywords: ["nextjs", "react", "tailwind", "typescript", "wallet-ui"],
    name: "gill-jito-airdrop",
    path: "community/gill-jito-airdrop",
    readme:
      '<h2>Solana Merkle Airdrop Distributor (Gill + Codama + Anchor)</h2>\n<p>A modern, script-driven Solana airdrop template that distributes SOL to many recipients efficiently using a Merkle tree. Only the 32‑byte Merkle root is stored on-chain. The project uses Anchor for the on-chain program, Codama for a generated TypeScript client, and the modern Solana Kit ("Gill") for transactions. This README focuses on how the program works and how to use it through the provided scripts.</p>\n<h3>Table of Contents</h3>\n<ul>\n<li><a href="#solana-merkle-airdrop-distributor-gill--codama--anchor">Solana Merkle Airdrop Distributor (Gill + Codama + Anchor)</a>\n<ul>\n<li><a href="#table-of-contents">Table of Contents</a></li>\n</ul>\n</li>\n<li><a href="#prerequisites">Prerequisites</a>\n<ul>\n<li><a href="#quick-installation-recommended">Quick Installation (Recommended)</a></li>\n<li><a href="#manual-installation">Manual Installation</a>\n<ul>\n<li><a href="#1-install-rust">1. Install Rust</a></li>\n<li><a href="#2-install-solana-cli">2. Install Solana CLI</a></li>\n<li><a href="#3-install-anchor-cli">3. Install Anchor CLI</a></li>\n<li><a href="#4-install-nodejs-and-yarn">4. Install Node.js and Yarn</a></li>\n</ul>\n</li>\n<li><a href="#verify-installation">Verify Installation</a></li>\n<li><a href="#solana-cli-basics">Solana CLI Basics</a>\n<ul>\n<li><a href="#configure-solana-cli">Configure Solana CLI</a></li>\n<li><a href="#create-a-wallet">Create a Wallet</a></li>\n<li><a href="#fund-your-wallet">Fund Your Wallet</a></li>\n</ul>\n</li>\n<li><a href="#quick-setup">Quick Setup</a>\n<ul>\n<li><a href="#initialize-the-on-chain-airdrop-state-and-makes-it-ready-for-claiming">Initialize the on-chain airdrop state and makes it ready for claiming:</a></li>\n</ul>\n</li>\n<li><a href="#architecture-overview">Architecture Overview</a></li>\n<li><a href="#merkle-airdrop-model">Merkle Airdrop Model</a>\n<ul>\n<li><a href="#why-merkle-root-only-on-chain">Why Merkle (root-only on-chain)</a></li>\n<li><a href="#proof-format-and-verification-flow">Proof format and verification flow</a></li>\n</ul>\n</li>\n<li><a href="#on-chain-design">On-Chain Design</a>\n<ul>\n<li><a href="#accounts">Accounts</a></li>\n<li><a href="#instructions">Instructions</a></li>\n<li><a href="#state-transitions-and-funds-flow">State transitions and funds flow</a></li>\n</ul>\n</li>\n<li><a href="#program-interactions">Program Interactions</a></li>\n<li><a href="#security-and-safety">Security and Safety</a></li>\n<li><a href="#testing-and-validation">Testing and Validation</a></li>\n<li><a href="#version-and-compatibility-notes">Version and Compatibility Notes</a></li>\n<li><a href="#using-the-scripts">Using the Scripts</a></li>\n<li><a href="#faq">FAQ</a></li>\n<li><a href="#glossary">Glossary</a></li>\n<li><a href="#gaps-and-suggestions">Gaps and Suggestions</a></li>\n</ul>\n</li>\n<li><a href="#-key-technologies">🎓 Key Technologies</a></li>\n</ul>\n<hr>\n<h2>Prerequisites</h2>\n<p>Before you can build and deploy Solana programs with this template, you need to install Rust, Solana CLI, and Anchor CLI on your system.</p>\n<h3>Quick Installation (Recommended)</h3>\n<p>On Mac and Linux, run this single command to install all dependencies:</p>\n<pre><code class="language-bash">curl --proto \'=https\' --tlsv1.2 -sSfL https://solana-install.solana.workers.dev | bash\n</code></pre>\n<p><strong>Windows Users:</strong> You must first install WSL (Windows Subsystem for Linux). Then run the command above in the Ubuntu (Linux) terminal.</p>\n<p>After installation, you should see output similar to:</p>\n<pre><code>Installed Versions:\nRust: rustc 1.85.0 (4d91de4e4 2025-02-17)\nSolana CLI: solana-cli 2.1.15 (src:53545685; feat:3271415109, client:Agave)\nAnchor CLI: anchor-cli 0.31.1\nNode.js: v23.9.0\nYarn: 1.22.1\n\nInstallation complete. Please restart your terminal to apply all changes.\n</code></pre>\n<p>If the quick installation works, skip to <a href="#verify-installation">Verify Installation</a>. If it doesn\'t work, follow the manual installation steps below.</p>\n<h3>Manual Installation</h3>\n<h4>1. Install Rust</h4>\n<p>Solana programs are written in Rust. Install it using rustup:</p>\n<pre><code class="language-bash">curl --proto \'=https\' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y\n</code></pre>\n<p>Reload your PATH environment variable:</p>\n<pre><code class="language-bash">. "$HOME/.cargo/env"\n</code></pre>\n<h4>2. Install Solana CLI</h4>\n<p>Install the Solana CLI tool suite:</p>\n<pre><code class="language-bash">sh -c "$(curl -sSfL https://release.anza.xyz/stable/install)"\n</code></pre>\n<p>Add Solana to your PATH (if prompted):</p>\n<pre><code class="language-bash">export PATH="$HOME/.local/share/solana/install/active_release/bin:$PATH"\n</code></pre>\n<h4>3. Install Anchor CLI</h4>\n<p>Install Anchor Version Manager (AVM) for managing Anchor versions:</p>\n<pre><code class="language-bash">cargo install --git https://github.com/coral-xyz/anchor avm --force\n</code></pre>\n<p>Install the latest Anchor CLI:</p>\n<pre><code class="language-bash">avm install latest\navm use latest\n</code></pre>\n<h4>4. Install Node.js and Yarn</h4>\n<p>Node.js and Yarn are required for running TypeScript tests and the frontend:</p>\n<p><strong>Node.js:</strong></p>\n<ul>\n<li>Visit <a href="https://nodejs.org/">nodejs.org</a> and install the LTS version</li>\n<li>Or use a version manager like <code>nvm</code>: <code>nvm install --lts &#x26;&#x26; nvm use --lts</code></li>\n</ul>\n<p><strong>Yarn:</strong></p>\n<pre><code class="language-bash">npm install -g yarn\n</code></pre>\n<h3>Verify Installation</h3>\n<p>Check that all tools are installed correctly:</p>\n<pre><code class="language-bash"># Check Rust\nrustc --version\n# Expected: rustc 1.84.1+\n\n# Check Solana CLI\nsolana --version\n# Expected: solana-cli 2.0.26+\n\n# Check Anchor CLI\nanchor --version\n# Expected: anchor-cli 0.31.1\n\n# Check Node.js\nnode --version\n# Expected: v22.0.0+\n\n# Check Yarn\nyarn --version\n# Expected: 1.22.1+\n</code></pre>\n<h3>Solana CLI Basics</h3>\n<h4>Configure Solana CLI</h4>\n<p>Set your cluster to devnet for development:</p>\n<pre><code class="language-bash">solana config set --url devnet\n</code></pre>\n<p>Check your current configuration:</p>\n<pre><code class="language-bash">solana config get\n</code></pre>\n<h4>Create a Wallet</h4>\n<p>Generate a new keypair for development:</p>\n<pre><code class="language-bash">solana-keygen new\n</code></pre>\n<p>Get your wallet address:</p>\n<pre><code class="language-bash">solana address\n</code></pre>\n<h4>Fund Your Wallet</h4>\n<p>Request devnet SOL for testing:</p>\n<pre><code class="language-bash">solana airdrop 2\n</code></pre>\n<p>Check your balance:</p>\n<pre><code class="language-bash">solana balance\n</code></pre>\n<p><strong>Note:</strong> The airdrop command is limited to 5 SOL per request and may have rate limits. Alternatively, use the <a href="https://faucet.solana.com/">Solana Web Faucet</a>.</p>\n<hr>\n<h3>Quick Setup</h3>\n<pre><code class="language-bash">pnpm create solana-dapp@latest -t gh:solana-foundation/templates/community/gill-jito-airdrop\n</code></pre>\n<pre><code class="language-bash">cd &#x3C;your-project>\npnpm install\n</code></pre>\n<p>Generates the necessary TypeScript types and client code from the Solana program:</p>\n<pre><code class="language-bash">pnpm codama:generate\n</code></pre>\n<p>Then set up the program:</p>\n<pre><code class="language-bash">pnpm airdrop:setup\n</code></pre>\n<p>This single command will:</p>\n<ul>\n<li>✅ Create deployment wallet and fund it with SOL</li>\n<li>✅ Generate test wallets for airdrop recipients</li>\n<li>✅ Build and deploy the Solana program</li>\n<li>✅ Update all configuration files</li>\n<li>✅ Generate the Merkle tree for airdrop distribution</li>\n</ul>\n<h4>Initialize the on-chain airdrop state and makes it ready for claiming:</h4>\n<pre><code class="language-bash">pnpm airdrop:init\n</code></pre>\n<pre><code class="language-bash">pnpm dev\n</code></pre>\n<hr>\n<h3>Architecture Overview</h3>\n<p>Airdrop distribution is reduced to a single on-chain commitment (the Merkle root), with off-chain generated proofs enabling recipients to claim their exact allocation. The template provides scripts to deploy, initialize, and claim using a type-safe, generated client.</p>\n<pre><code class="language-ascii">┌──────────────────────────────────────────────────────────┐\n│                   Off-chain Preparation                  │\n│  recipients.json  →  Merkle Tree  →  Root + Proofs       │\n└───────────────┬───────────────────────┬──────────────────┘\n                │                       │\n  initialize(root, totalAmount)     claim(proof, amount, index)\n                │                       │\n        ┌───────▼─────────┐       ┌─────▼────────────────┐\n        │  Airdrop State  │       │  Claim Status (PDA)  │\n        │  (root stored)  │       │  per recipient       │\n        └───────┬─────────┘       └──────────┬───────────┘\n                │                            │\n                │ funds                      │ prevent double-claim\n                │                            │\n           ┌────▼──────────┐            ┌────▼──────────┐\n           │ Vault (PDA)   │ ───SOL──▶  │ Recipient     │\n           └───────────────┘            └───────────────┘\n</code></pre>\n<hr>\n<h3>Merkle Airdrop Model</h3>\n<h4>Why Merkle (root-only on-chain)</h4>\n<ul>\n<li>Storing each recipient on-chain is expensive. A Merkle tree commits to the entire set with a single 32‑byte root.</li>\n<li>Each recipient proves inclusion with a logarithmic-size proof. On-chain verifies the proof against the stored root.</li>\n<li>Benefits: smaller state, predictable compute cost, scalable to large recipient sets.</li>\n</ul>\n<h4>Proof format and verification flow</h4>\n<ul>\n<li>Leaf: hash of recipient data, typically <code>H(pubkey || amount)</code>. The exact encoding must match what the generator uses.</li>\n<li>Proof: ordered array of sibling hashes along the path to the root.</li>\n<li>Verification (simplified):\n<ol>\n<li>Compute <code>leaf = H(pubkey || amount)</code> matching the off-chain generator’s format.</li>\n<li>Fold siblings: for each proof node, <code>hash = H(order(left, right))</code> using the known left/right order (often guided by <code>leafIndex</code>).</li>\n<li>Compare computed hash to the stored Merkle root; if equal, the claim is valid.</li>\n</ol>\n</li>\n</ul>\n<p>Gotcha: Proof order and the leaf encoding must match exactly. Any mismatch yields “invalid proof.”</p>\n<hr>\n<h3>On-Chain Design</h3>\n<h4>Accounts</h4>\n<ul>\n<li>\n<p>Airdrop State PDA</p>\n<ul>\n<li>Purpose: Stores immutable Merkle root and global airdrop parameters.</li>\n<li>Example seeds: ["airdrop", authority, airdropId]</li>\n<li>Data (typical):\n<ul>\n<li><code>authority: Pubkey</code> — entity initializing the airdrop</li>\n<li><code>merkleRoot: [u8; 32]</code></li>\n<li><code>totalAmount: u64</code> — total lamports allocated</li>\n<li><code>claimedAmount: u64</code> — cumulative claimed lamports</li>\n<li><code>bump: u8</code></li>\n</ul>\n</li>\n<li>Space: <code>8 (discriminator) + 32 + 32 + 8 + 8 + 1</code> ≈ 89 bytes; allocate with headroom (e.g., 128 bytes)</li>\n</ul>\n</li>\n<li>\n<p>Vault PDA (System Account owned by program)</p>\n<ul>\n<li>Purpose: Holds SOL to be distributed.</li>\n<li>Example seeds: ["vault", airdropState]</li>\n<li>Data: lamports only; no data account needed if purely a System Account</li>\n<li>Property: Only the program can move lamports from this PDA.</li>\n</ul>\n</li>\n<li>\n<p>Claim Status PDA (per recipient)</p>\n<ul>\n<li>Purpose: Prevents double-claim.</li>\n<li>Example seeds: ["claim", airdropState, recipientPubkey]</li>\n<li>Data (typical):\n<ul>\n<li><code>claimed: bool</code></li>\n<li><code>amount: u64</code> (optional bookkeeping of claimed amount)</li>\n<li><code>bump: u8</code></li>\n</ul>\n</li>\n<li>Space: <code>8 + 1 + 8 + 1</code> ≈ 18 bytes; allocate with headroom (e.g., 64 bytes)</li>\n</ul>\n</li>\n</ul>\n<p>Gotcha: Seeds shown are representative. Use the seeds compiled into your program and generated client.</p>\n<h4>Instructions</h4>\n<ul>\n<li>\n<p>initializeAirdrop</p>\n<ul>\n<li>Inputs: <code>merkleRoot: [u8; 32]</code>, <code>totalAmount: u64</code></li>\n<li>Accounts: <code>authority (signer)</code>, <code>airdropState (PDA)</code>, <code>vault (PDA)</code>, <code>systemProgram</code></li>\n<li>Effects:\n<ul>\n<li>Creates/initializes <code>airdropState</code></li>\n<li>Optionally creates <code>vault</code></li>\n<li>Records the Merkle root and total allocation</li>\n<li>May assert that sufficient SOL is present or transferred to <code>vault</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>claimAirdrop</p>\n<ul>\n<li>Inputs: <code>amount: u64</code>, <code>leafIndex: u32|u64</code>, <code>proof: [[u8; 32]]</code></li>\n<li>Accounts: <code>signer (recipient)</code>, <code>airdropState</code>, <code>claimStatus (PDA)</code>, <code>vault (PDA)</code>, <code>systemProgram</code></li>\n<li>Effects:\n<ul>\n<li>Verifies the Merkle proof matches <code>(recipient, amount, index)</code></li>\n<li>Ensures <code>claimStatus</code> indicates not yet claimed</li>\n<li>Marks as claimed and transfers <code>amount</code> lamports from <code>vault</code> to <code>signer</code></li>\n<li>Updates <code>claimedAmount</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>Safeguards:</p>\n<ul>\n<li>Double-claim protection via <code>Claim Status</code> PDA.</li>\n<li>Root immutability: once set, the airdrop membership is fixed.</li>\n<li>Program-owned vault: only program logic moves funds.</li>\n</ul>\n<h4>State transitions and funds flow</h4>\n<ul>\n<li>Initialize: <code>airdropState</code> is created with root and totals; <code>vault</code> is established and funded for the airdrop.</li>\n<li>Claim: Upon proof verification, lamports flow from <code>vault</code> to the claimant; <code>claimStatus</code> is created and marked to prevent reuse.</li>\n<li>Completion: When <code>claimedAmount == totalAmount</code>, distribution is complete. Any remainder handling (e.g., sweep/close) depends on program design.</li>\n</ul>\n<hr>\n<h3>Program Interactions</h3>\n<p>Below are concise TypeScript examples using the generated Codama client. These snippets assume the scripts have already generated and wired the client paths. Use Solana Kit ("Gill") to create and send transactions.</p>\n<p>Initialize airdrop:</p>\n<pre><code class="language-ts">import { getInitializeAirdropInstruction } from \'./anchor/generated/clients/ts/instructions/initializeAirdrop\'\nimport { address } from \'gill\' // Gill/Solana Kit address helpers\n// import your client, RPC, and wallet abstractions from your app’s runtime\n\nconst initIx = getInitializeAirdropInstruction({\n  airdropState: airdropStatePda, // PDA derived by client/helpers\n  authority: authorityPubkey, // wallet pubkey\n  merkleRoot: new Uint8Array(root32), // 32-byte root\n  amount: BigInt(totalLamports), // u64\n})\n\n// Use your Solana Kit transaction helpers to send:\n// await sendInstructions([initIx], { payer: authority, rpc });\n</code></pre>\n<p>Claim airdrop:</p>\n<pre><code class="language-ts">import { getClaimAirdropInstruction } from \'./anchor/generated/clients/ts/instructions/claimAirdrop\'\nimport { address } from \'gill\'\n\nconst proofBytes = proofHexArray.map((h) => new Uint8Array(Buffer.from(h.slice(2), \'hex\')))\n\nconst claimIx = getClaimAirdropInstruction({\n  airdropState: airdropStatePda,\n  userClaim: claimStatusPda, // PDA for this recipient\n  signer: recipientPubkey, // claimant wallet\n  proof: proofBytes, // [[u8; 32]]\n  amount: BigInt(recipientLamports),\n  leafIndex: recipientIndex,\n})\n\n// await sendInstructions([claimIx], { payer: recipient, rpc });\n</code></pre>\n<p>Gotcha: Ensure the proof, amount, and index fed to the instruction are exactly those used by the Merkle generator that produced the root.</p>\n<hr>\n<h3>Security and Safety</h3>\n<ul>\n<li>\n<p>Common pitfalls</p>\n<ul>\n<li>Proof mismatch: Using a different hashing or encoding than the generator yields “invalid proof.”</li>\n<li>Program ID mismatch: If the deployed ID differs from what the client expects, instruction builders point to the wrong program.</li>\n<li>Replay/double-claim: Prevented by <code>Claim Status</code> PDA; if missing or mismatched seeds, a second claim may slip through in theory—stick to the generated client and canonical seeds.</li>\n</ul>\n</li>\n<li>\n<p>Upgrade authority and immutability</p>\n<ul>\n<li>Keep the upgrade authority secure. Consider making the program immutable after thorough testing.</li>\n<li>If upgradable, document any migration strategy for vault and state.</li>\n</ul>\n</li>\n<li>\n<p>Limits</p>\n<ul>\n<li>Compute budget: Proof depth increases compute cost (~O(log n)). Very deep trees need budget tuning.</li>\n<li>Account sizes: Reserve adequate space for PDAs (Anchor discriminator adds 8 bytes).</li>\n<li>Transaction size: Large proofs or multiple instructions may approach limits; use single-claim per transaction.</li>\n</ul>\n</li>\n</ul>\n<p>Gotcha: Root immutability means membership is fixed. Changing recipients requires a new root and a new airdrop state.</p>\n<hr>\n<h3>Testing and Validation</h3>\n<p>The test suite validates:</p>\n<ul>\n<li>Initialization creates PDAs and records the Merkle root</li>\n<li>Happy-path claim transfers lamports and marks the claim</li>\n<li>Double-claim is rejected via <code>Claim Status</code> PDA</li>\n<li>Incorrect proof or wrong amount fails verification</li>\n<li>Aggregate <code>claimedAmount</code> reflects actual transfers</li>\n</ul>\n<p>See <code>anchor/tests/solana-distributor-comprehensive.test.ts</code> for end‑to‑end coverage using the generated client and Solana Kit helpers.</p>\n<hr>\n<h3>Version and Compatibility Notes</h3>\n<ul>\n<li>Anchor CLI: 0.31.1</li>\n<li>Solana CLI: 2.2.20+ (2.2.x)</li>\n<li>Rust: 1.88.0+</li>\n<li>Node.js: 22+</li>\n</ul>\n<p>The template and generated client target these versions for consistent behavior and type compatibility.</p>\n<hr>\n<h3>Using the Scripts</h3>\n<ul>\n<li>Run the provided scripts in order to generate the client, deploy, and initialize the airdrop; then use the app or scripts to claim.</li>\n<li>Environment, program IDs, recipients, and Merkle artifacts are auto-managed by the scripts and committed to the expected paths.</li>\n</ul>\n<hr>\n<h3>FAQ</h3>\n<ul>\n<li>\n<p>Why does my claim say “Address not eligible for this airdrop”?</p>\n<ul>\n<li>The wallet is not in the recipients set used to produce the current Merkle root, or the proof/amount/index don’t match.</li>\n</ul>\n</li>\n<li>\n<p>I see “Program ID mismatch.” What now?</p>\n<ul>\n<li>Ensure your generated client and scripts reference the deployed program ID. Re-run the script that fixes IDs and regenerates the client.</li>\n</ul>\n</li>\n<li>\n<p>Claims fail with “invalid proof.”</p>\n<ul>\n<li>Ensure the generator and on-chain hashing agree on leaf encoding and sibling order. Regenerate proofs after any recipients change.</li>\n</ul>\n</li>\n<li>\n<p>Can someone claim twice with the same wallet?</p>\n<ul>\n<li>No. The claim creates a <code>Claim Status</code> PDA keyed by <code>(airdropState, recipient)</code>. Second attempts are rejected.</li>\n</ul>\n</li>\n<li>\n<p>What if the vault runs out of SOL?</p>\n<ul>\n<li>Claims will fail. Replenishment behavior depends on your program’s design. This template expects sufficient initial funding during initialization.</li>\n</ul>\n</li>\n<li>\n<p>Can I rotate the authority?</p>\n<ul>\n<li>Not by default. Authority primarily matters at initialization. Changing authorities typically requires explicit program support and migration.</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3>Glossary</h3>\n<ul>\n<li>Merkle root: A 32‑byte commitment to a set. Verifies inclusion with minimal proofs.</li>\n<li>Merkle proof: A sequence of sibling hashes used to reconstruct the root from a leaf.</li>\n<li>PDA (Program Derived Address): Deterministic, program-owned address derived from seeds, not signable by a private key.</li>\n<li>Lamports: Smallest unit of SOL (1 SOL = 1,000,000,000 lamports).</li>\n<li>Discriminator: Anchor’s 8‑byte account type prefix stored in every account it manages.</li>\n<li>Authority: The signer that initializes the airdrop; typically controls setup, not claims.</li>\n<li>Vault: Program-owned System Account holding the lamports to distribute.</li>\n</ul>\n<hr>\n<h3>Gaps and Suggestions</h3>\n<ul>\n<li>Explicit seeds and data layouts: Document the exact PDA seeds and account layouts as compiled, including endianness and serialization formats, in <code>anchor/README.md</code> alongside the IDL.</li>\n<li>Hashing details: Add a dedicated note specifying the leaf encoding and hash function, including byte order and any domain separators, to eliminate proof mismatches.</li>\n<li>Vault lifecycle: Clarify whether the vault can be topped up, swept, or closed, and under what authority or conditions.</li>\n<li>Compute guidance: Provide recommended compute budget and proof depth limits for large distributions, plus tips for splitting claims if needed.</li>\n<li>Error catalog: Include a short table mapping common on-chain error codes to actionable fixes to speed up debugging.</li>\n<li>Post-initialize governance: If upgrades remain enabled, document upgrade procedures and how they affect the client and deployed state; if not, state immutability explicitly.</li>\n</ul>\n<hr>\n<h2>🎓 Key Technologies</h2>\n<ul>\n<li><strong><a href="https://github.com/decalLabs/gill">Gill</a></strong>: Modern Solana JavaScript SDK</li>\n<li><strong><a href="https://github.com/anza-xyz/kit">@solana/kit</a></strong></li>\n<li><strong><a href="https://github.com/codama-idl/codama">Codama</a></strong>: Automatic client generation</li>\n<li><strong><a href="https://www.anchor-lang.com/">Anchor Framework</a></strong>: Solana program development</li>\n<li><strong><a href="https://vitest.dev/">Vitest</a></strong>: Fast unit testing framework</li>\n</ul>\n<hr>\n',
    repoUrl:
      "https://github.com/solana-foundation/templates/tree/main/community/gill-jito-airdrop",
  },
];
